// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  username       String    @unique
  password       String
  firstName      String?
  lastName       String?
  addresses      String[]
  defaultAddress String?
  role           Role      @default(USER)
  orders         Order[]
  cart           Cart?
}

model Product {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  name        String           @unique @db.VarChar(255)
  description String
  price       Float
  category    String
  updates     Update[]
  variants    ProductVariant[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model ProductVariant {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  name        String
  description String
  price       Float
  attributes  Json?
  productId   String
  product     Product     @relation(fields: [productId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id         String          @id @default(uuid())
  quantity   Int
  cartId     String
  cart       Cart            @relation(fields: [cartId], references: [id])
  productId  String
  product    Product         @relation(fields: [productId], references: [id])
  variantId  String?
  variant    ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId, variantId])
}

enum ORDER_STATUS {
  PENDING
  COMPLETED
  CANCELLED
}

model Order {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  total     Float
  status    ORDER_STATUS @default(PENDING)
  items     OrderItem[]
}

model OrderItem {
  id         String          @id @default(uuid())
  createdAt  DateTime        @default(now())
  quantity   Int
  price      Float
  orderId    String
  order      Order           @relation(fields: [orderId], references: [id])
  productId  String
  product    Product         @relation(fields: [productId], references: [id])
  variantId  String?
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
}

enum UPDATE_STATUS {
  IN_PROGRESS
  SHIPPED
  DEPRECATED
}

model Update {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title        String
  body         String
  status       UPDATE_STATUS @default(IN_PROGRESS)
  version      String?
  asset        String?
  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  updatePoints UpdatePoint[]
}

model UpdatePoint {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String @db.VarChar(255)
  description String
  updateId    String
  update      Update @relation(fields: [updateId], references: [id])
}
